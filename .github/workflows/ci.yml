name: Build Java to Docker Image and Push to ECR
on:
  workflow_call:
    inputs:
      aws-region:
        description: "AWS region"
        required: false
        default: "ap-east-1"
        type: string
      dockerfile-path:
        description: "Path to Dockerfile"
        required: false
        default: "Dockerfile"
        type: string
      platforms:
        description: "Target platforms"
        required: false
        default: "linux/amd64"
        type: string
      java-version:
        description: "Java version for testing"
        required: false
        default: "17"
        type: string
      enable-tests:
        description: "Enable unit tests"
        required: false
        default: true
        type: boolean
    secrets:
      aws-access-key-id:
        description: "AWS Access Key ID"
        required: true
      aws-secret-access-key:
        description: "AWS Secret Access Key"
        required: true
      
jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ inputs.aws-region }}
      ECR_REGISTRY: 390402541453.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com
    
    outputs:
      image-uri: ${{ steps.build-vars.outputs.image-uri }}
      image-tag: ${{ steps.build-vars.outputs.image-tag }}
      
    steps:
      # 01. 检出代码
      - name: 01. 检出代码
        uses: actions/checkout@v4
        
      # 02. 设置 Java 环境（用于测试）
      - name: 02. 设置 Java ${{ inputs.java-version }}
        if: ${{ inputs.enable-tests }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'temurin'
          cache: maven
          
      # 03. 运行单元测试
      - name: 03. 运行单元测试
        if: ${{ inputs.enable-tests }}
        run: |
          if [ -f "pom.xml" ]; then
            mvn clean test
          elif [ -f "build.gradle" ]; then
            ./gradlew test
          else
            echo "No Maven or Gradle build file found, skipping tests"
          fi
          
      # 04. 设置变量并打印信息
      - name: 04. 设置构建变量
        id: build-vars
        run: |
          # 分支名处理：将 / 替换为 -，避免 Docker tag 问题
          BRANCH_NAME="${{ github.ref_name }}"
          SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          echo "BRANCH_NAME=$SAFE_BRANCH_NAME" >> $GITHUB_ENV
          
          # 仓库名：项目名称转小写
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          echo "ECR_REPOSITORY=$REPO_NAME" >> $GITHUB_ENV
          
          # 镜像标签：分支-提交SHA前7位-时间戳
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M")
          IMAGE_TAG="${SAFE_BRANCH_NAME}-${SHORT_SHA}-${TIMESTAMP}"
          TIMESTAMP_TAG=$(date -u +"%Y%m%d-%H%M%S")
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "TIMESTAMP_TAG=$TIMESTAMP_TAG" >> $GITHUB_ENV
          
          # 完整镜像 URI
          IMAGE_URI="${{ env.ECR_REGISTRY }}/${REPO_NAME}:${IMAGE_TAG}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          
          # 输出到 GitHub Actions outputs
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # 打印信息
          echo "🏗️ Repository: $REPO_NAME"
          echo "🏷️ Image Tag: $IMAGE_TAG"
          echo "⏰ Timestamp Tag: $TIMESTAMP_TAG"
          echo "📦 Full Image URI: $IMAGE_URI"
          
      # 05. 配置 AWS 认证
      - name: 05. 配置 AWS 认证
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          
      # 06. 创建 ECR 仓库（如果不存在）
      - name: 06. 创建 ECR 仓库
        run: |
          echo "🔍 检查 ECR 仓库是否存在..."
          if aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ inputs.aws-region }} 2>/dev/null; then
            echo "✅ ECR 仓库已存在: ${{ env.ECR_REPOSITORY }}"
          else
            echo "🆕 创建 ECR 仓库: ${{ env.ECR_REPOSITORY }}"
            aws ecr create-repository \
              --repository-name ${{ env.ECR_REPOSITORY }} \
              --region ${{ inputs.aws-region }} \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256
            
            # 设置生命周期策略
            aws ecr put-lifecycle-configuration \
              --repository-name ${{ env.ECR_REPOSITORY }} \
              --region ${{ inputs.aws-region }} \
              --lifecycle-policy-text '{
                "rules": [
                  {
                    "rulePriority": 1,
                    "description": "Keep last 20 images",
                    "selection": {
                      "tagStatus": "any",
                      "countType": "imageCountMoreThan",
                      "countNumber": 20
                    },
                    "action": {
                      "type": "expire"
                    }
                  }
                ]
              }'
            echo "✅ ECR 仓库创建完成并设置生命周期策略"
          fi
          
      # 07. 登录 Amazon ECR
      - name: 07. 登录 Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      # 08. 设置 Docker Buildx
      - name: 08. 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # 09. 构建并推送 Docker 镜像
      - name: 09. 构建并推送 Docker 镜像
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.dockerfile-path }}
          platforms: ${{ inputs.platforms }}
          push: true
          tags: |
            ${{ env.IMAGE_URI }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.TIMESTAMP_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # 10. 输出构建结果
      - name: 10. 构建完成
        run: |
          echo "🎉 构建完成！"
          echo "📦 镜像已推送到: ${{ env.IMAGE_URI }}"
          echo "🔗 ECR 控制台: https://console.aws.amazon.com/ecr/repositories/private/${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}"
