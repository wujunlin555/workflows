name: Build Java to Docker Image and Push to ECR

on:
  workflow_call:
    inputs:
      aws-region:
        type: string
        default: "ap-east-1"
      aws-account-id:
        type: string
        default: "865258959313"
      keep-images:
        type: number
        default: 20
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
    outputs:
      image-uri:
        value: ${{ jobs.build-push.outputs.image-uri }}
      image-tag:
        value: ${{ jobs.build-push.outputs.image-tag }}

jobs:
  build-push:
    runs-on: ubuntu-latest

    outputs:
      image-uri: ${{ steps.vars.outputs.image-uri }}
      image-tag: ${{ steps.vars.outputs.image-tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Variables
        id: vars
        run: |
          TIMESTAMP=$(date -u '+%Y%m%d-%H%M%S')
          BRANCH=$(echo "${GITHUB_REF_NAME}" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          REPO=$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]' '[:lower:]')
          SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)

          IMAGE_TAG="${BRANCH}-${SHA}-${TIMESTAMP}"
          ECR_REGISTRY="${{ inputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com"
          IMAGE_URI="${ECR_REGISTRY}/${REPO}:${IMAGE_TAG}"

          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY=$REPO" >> $GITHUB_ENV
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

          echo "🪐 Building Image: $IMAGE_URI"

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Create ECR Repository If Missing
        run: |
          if ! aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1; then
            aws ecr create-repository --repository-name "$ECR_REPOSITORY" --image-scanning-configuration scanOnPush=true
            aws ecr put-lifecycle-configuration \
              --repository-name "$ECR_REPOSITORY" \
              --lifecycle-policy-text '{
                "rules": [{
                  "rulePriority": 1,
                  "description": "Keep latest '${{ inputs.keep-images }}' images",
                  "selection": {
                    "tagStatus": "any",
                    "countType": "imageCountMoreThan",
                    "countNumber": '${{ inputs.keep-images }}'
                  },
                  "action": { "type": "expire" }
                }]
              }'
          fi

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_URI }}

      - name: Cleanup Old Images
        run: |
          IMAGES=$(aws ecr describe-images --repository-name "$ECR_REPOSITORY" \
            --query "sort_by(imageDetails,&imagePushedAt)[?imageTags[0]!=null].imageDigest" \
            --output text)

          COUNT=0
          for DIGEST in $IMAGES; do COUNT=$((COUNT+1)); done

          KEEP=${{ inputs.keep-images }}
          if [ "$COUNT" -gt "$KEEP" ]; then
            DEL=$((COUNT - KEEP))
            echo "Deleting $DEL old images..."
            TO_DELETE=$(echo "$IMAGES" | head -n "$DEL")
            for DIGEST in $TO_DELETE; do
              aws ecr batch-delete-image --repository-name "$ECR_REPOSITORY" --image-ids imageDigest="$DIGEST"
            done
          else
            echo "No old images to delete."
          fi

      - name: ✅ Done
        run: |
          echo "✅ Image Built & Pushed: $IMAGE_URI"
