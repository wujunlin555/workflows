name: Build Java Docker Image and Push to ECR

on:
  workflow_call:
    inputs:
      aws-region:
        default: "ap-east-1"
        type: string
      aws-account-id:
        default: "865258959313"
        type: string
      keep-images:
        default: 20
        type: number
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
    outputs:
      image-uri:
        value: ${{ jobs.build-push.outputs.image-uri }}
      image-tag:
        value: ${{ jobs.build-push.outputs.image-tag }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      AWS_REGION: ${{ inputs.aws-region }}
      ECR_REGISTRY: ${{ inputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com

    outputs:
      image-uri: ${{ steps.vars.outputs.image-uri }}
      image-tag: ${{ steps.vars.outputs.image-tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Variables
        id: vars
        run: |
          TIME=$(date -u '+%Y%m%d-%H%M%S')
          BRANCH=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          REPO=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          TAG="${BRANCH}-${SHA}-${TIME}"
          URI="${ECR_REGISTRY}/${REPO}:${TAG}"

          echo "ECR_REPO=$REPO" >> $GITHUB_ENV
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "IMAGE_URI=$URI" >> $GITHUB_ENV

          echo "image-uri=$URI" >> $GITHUB_OUTPUT
          echo "image-tag=$TAG" >> $GITHUB_OUTPUT

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Create ECR Repository (if not exists)
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPO || \
          aws ecr create-repository --repository-name $ECR_REPO --image-scanning-configuration scanOnPush=true
          aws ecr put-lifecycle-configuration --repository-name $ECR_REPO --lifecycle-policy-text "{
            \"rules\": [{
              \"rulePriority\": 1,
              \"description\": \"Keep last ${{ inputs.keep-images }} images\",
              \"selection\": {\"tagStatus\": \"any\", \"countType\": \"imageCountMoreThan\", \"countNumber\": ${{ inputs.keep-images }}},
              \"action\": {\"type\": \"expire\"}
            }]
          }"

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_URI }}

      - name: Cleanup Old Images
        run: |
          DIGESTS=$(aws ecr describe-images --repository-name $ECR_REPO --query 'sort_by(imageDetails,&imagePushedAt)[:-${{ inputs.keep-images }}].[imageDigest]' --output text)
          for d in $DIGESTS; do
            aws ecr batch-delete-image --repository-name $ECR_REPO --image-ids imageDigest=$d || true
          done

      - name: Output Image Info
        run: |
          echo "âœ… Image pushed: ${{ env.IMAGE_URI }}"
