# 通用 ECR 构建 Workflow
name: Build Docker Image and Push to ECR

on:
  workflow_call:
    inputs:
      aws-region:
        description: "AWS region"
        required: false
        default: "ap-east-1"
        type: string
      aws-account-id:
        description: "AWS Account ID"
        required: false
        default: "865258959313"
        type: string
      keep-images:
        description: "Number of images to keep"
        required: false
        default: 20
        type: number
      dockerfile-path:
        description: "Path to Dockerfile"
        required: false
        default: ".github/workflows/Dockerfile"
        type: string
    secrets:
      aws-access-key-id:
        description: "AWS Access Key ID"
        required: true
      aws-secret-access-key:
        description: "AWS Secret Access Key"
        required: true

jobs:
  build-push:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    env:
      AWS_REGION: ${{ inputs.aws-region }}
      ECR_REGISTRY: ${{ inputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set Variables
        id: vars
        run: |
          TIMESTAMP=$(date -u '+%Y%m%d-%H%M%S')
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          
          IMAGE_TAG="${BRANCH_NAME}-${TIMESTAMP}"
          IMAGE_URI="${ECR_REGISTRY}/${REPO_NAME}:${IMAGE_TAG}"
          
          echo "ECR_REPOSITORY=$REPO_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          
          echo "Image: $IMAGE_URI"
          
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          
      - name: Create Lifecycle Policy File
        run: |
          cat > lifecycle-policy.json << EOF
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last ${{ inputs.keep-images }} images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": ${{ inputs.keep-images }}
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
          EOF
          
      - name: Create ECR Repository with Lifecycle Policy
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ env.ECR_REPOSITORY }}
          public: false
          lifecycle-policy: lifecycle-policy.json
          
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
          
      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.dockerfile-path }}
          push: true
          platforms: linux/amd64
          tags: ${{ env.IMAGE_URI }}
        
      - name: Build Complete
        run: |
          echo "✅ Image pushed: ${{ env.IMAGE_URI }}"
